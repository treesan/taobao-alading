<%@ CodeTemplate Language="C#" TargetLanguage="Text" ResponseEncoding="UTF-8"  Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.ViewSchema" Category="Context" Description="Database" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %> 
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %> 

<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Alading.Core.Interface;
using Alading.Entity;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Data.Objects;
using Alading.Core.Enum;
using System.Linq.Expressions;

namespace Alading.DataProvider
{
   
    public partial class DataProviderClass : IAlading
    {
        public List<<%= SourceTable.Name  %>> Get<%= SourceTable.Name  %>(List<string> <%= SourceTable.Name.ToLower() %>CodeList)
        {
            try
            {
                using (AladingEntities alading = new AladingEntities())
                {
					/*var result = alading.<%= SourceTable.Name  %>.Where(BuildWhereInExpression<<%= SourceTable.Name  %>, int>(v => v.<%= SourceTable.Name  %>ID, <%= SourceTable.Name.ToLower() %>IDList));*/
                    var result = alading.<%= SourceTable.Name  %>.Where(BuildWhereInExpression<<%= SourceTable.Name  %>, string>(v => v.<%= SourceTable.Name  %>Code, <%= SourceTable.Name.ToLower() %>CodeList));

                    return result.ToList();
                }
            }
            catch (System.Exception ex)
            {
                return null;
            }
        }        
     
        public List<<%= SourceTable.Name  %>> GetAll<%= SourceTable.Name  %>()
        {
            try
            {
                using (AladingEntities alading = new AladingEntities())
                {
                    List<<%= SourceTable.Name  %>> list = alading.<%= SourceTable.Name  %>.ToList();
                    return list;
                }
            }
            catch (System.Exception ex)
            {
                throw ex;
            }
        }
      
        public List<<%= SourceTable.Name  %>> Get<%= SourceTable.Name  %>(Func<<%= SourceTable.Name  %>, bool> func)
        {
            try
            {
                using (AladingEntities alading = new AladingEntities())
                {
                    List<<%= SourceTable.Name  %>> list = alading.<%= SourceTable.Name  %>.Where(func).ToList();
                    return list;
                }

            }
            catch (System.Exception ex)
            {
                throw ex;
            }
        }
     
        public <%= SourceTable.Name %> Get<%= SourceTable.Name  %>(string <%= SourceTable.Name.ToLower() %>Code)
        {
            try
            {
                using (AladingEntities alading = new AladingEntities())
                {
                    List<<%= SourceTable.Name  %>> list = alading.<%= SourceTable.Name  %>.Where(p => p.<%= SourceTable.Name  %>Code == <%= SourceTable.Name.ToLower() %>Code).ToList();
                    if (list.Count == 0)
                    {
                        return null;
                    }
                    else
                    {
                        return list.First();
                    }
                }
            }
            catch (System.Exception ex)
            {
                throw ex;
            }
        }
        
        public List<<%= SourceTable.Name  %>> Get<%= SourceTable.Name  %>(int pageIndex, int pageSize, out int rowCount)
        {
            try
            {
                using (AladingEntities alading = new AladingEntities())
                {
                    
					var ob = (from u in alading.<%= SourceTable.Name  %> orderby u.<%= SourceTable.Name  %>ID descending select u).Skip((pageIndex-1) * pageSize).Take(pageSize);
                    rowCount = alading.<%= SourceTable.Name  %>.Count();
                    return ob.ToList();
                }
            }
            catch (System.Exception ex)
            {
                throw ex;
            }
        }
        
        public List<<%= SourceTable.Name %>> Get<%= SourceTable.Name  %>(Func<<%= SourceTable.Name  %>, bool> func, int pageIndex, int pageSize, out int rowCount)
        {
            try
            {
                using (AladingEntities alading = new AladingEntities())
                {
                    IOrderedEnumerable<<%= SourceTable.Name  %>> list = alading.<%= SourceTable.Name  %>.Where(func).OrderByDescending(a=>a.<%= SourceTable.Name  %>ID);
                    rowCount = list.Count();
                    return list.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                }
            }
            catch (System.Exception ex)
            {
                throw ex;
            }
        }        
    }
}

